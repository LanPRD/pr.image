---
import { Button } from "@/components/button";
import { ComboboxFormat } from "@/components/combobox-format";
import Input from "@/components/input.astro";
import { Label } from "@/components/label";
import { Slider } from "@/components/slider";
import { inputOutputStore } from "@/stores/image-extension-store";
import { cn } from "@/utils/tailwind-merge";
import Layout from "../layouts/Layout.astro";
---

<Layout title="JPG to PNG | pr.image">
  <hgroup>
    <ComboboxFormat client:load />

    <h1>
      <span id="input-extension">{inputOutputStore.get().input}</span> to <span id="output-extension"
        >{inputOutputStore.get().output}</span
      >
    </h1>
    <h2 class="text-mauve-11 text-xl">
      Convert image from <span id="input-extension-subtitle">{inputOutputStore.get().input}</span> to <span
        id="output-extension-subtitle">{inputOutputStore.get().output}</span
      >
    </h2>
  </hgroup>

  <section class="mt-10">
    <form id="conversion-form">
      <div>
        <Label
          htmlFor="image-selected"
          className={cn(
            "flex items-center justify-center h-80",
            "bg-mauve-3 rounded border border-accent-7 hover:bg-mauve-4 hover:border-accent-8",
            "text-accent-11 cursor-pointer"
          )}
        >
          Select&nbsp;<span id="input-extension-label">{inputOutputStore.get().input}</span>&nbsp;image
        </Label>
        <Input id="image-selected" type="file" accept=".jpg, .jpeg" class="sr-only" />
      </div>

      <!-- Controle de Qualidade -->
      <div class="mt-4">
        <Label htmlFor="quality-range" className="block mb-2">Quality: <span id="quality-value">50%</span></Label>
        <Slider max={100} defaultValue={[50]} step={1} client:load id="quality-range" />
      </div>
    </form>

    <div class="mt-8 flex items-center justify-center">
      <Button className="w-1/2" id="start-conversion">Start conversion</Button>
    </div>

    <!-- Image para desenhar a imagem e converter -->
    <img id="img-preview" class="hidden mt-4 border border-gray-300" />

    <!-- Container para o link de download -->
    <div id="download-container" class="hidden mt-4">
      <a id="download-link" href="#" download="" class="btn btn-primary">Download PNG</a>
    </div>
  </section>

  <script>
    import { ImageConversionController } from "@/controllers/image-conversion-controller";
    import { inputOutputStore } from "@/stores/image-extension-store";
    import { removeExtension } from "@/utils/file";

    document.addEventListener("DOMContentLoaded", () => {
      const inputExtensionElement = document.getElementById("input-extension") as HTMLSpanElement | null;
      const outputExtensionElement = document.getElementById("output-extension") as HTMLSpanElement | null;

      const inputExtensionSubtitle = document.getElementById("input-extension-subtitle") as HTMLSpanElement | null;
      const outputExtensionSubtitle = document.getElementById("output-extension-subtitle") as HTMLSpanElement | null;

      const inputExtensionLabel = document.getElementById("input-extension-label") as HTMLSpanElement | null;

      inputOutputStore.subscribe(state => {
        if (inputExtensionElement && inputExtensionSubtitle && inputExtensionLabel) {
          inputExtensionLabel.textContent = state.input.toUpperCase();
          inputExtensionElement.textContent = state.input.toUpperCase();
          inputExtensionSubtitle.textContent = state.input.toUpperCase();
        }

        if (outputExtensionElement && outputExtensionSubtitle) {
          outputExtensionElement.textContent = state.output.toUpperCase();
          outputExtensionSubtitle.textContent = state.output.toUpperCase();
        }
      });

      const fileInput = document.getElementById("image-selected") as HTMLInputElement | null;
      const imgPreview = document.getElementById("img-preview") as HTMLImageElement | null;
      const downloadLink = document.getElementById("download-link") as HTMLAnchorElement | null;
      const downloadContainer = document.getElementById("download-container") as HTMLElement | null;
      const qualityRange = document.getElementById("quality-range") as HTMLInputElement | null;
      const qualityValue = document.getElementById("quality-value") as HTMLElement | null;
      const conversionButton = document.getElementById("start-conversion") as HTMLElement | null;

      if (!fileInput || !qualityRange || !qualityValue || !conversionButton || !downloadLink || !downloadContainer) {
        console.error("Um ou mais elementos necessários não foram encontrados no DOM.");
        return;
      }

      // Atualizar o valor da qualidade exibido
      qualityRange.addEventListener("input", event => {
        const input = event.target as HTMLInputElement;
        qualityValue.textContent = `${input.value}%`;
      });

      conversionButton.addEventListener("click", async _event => {
        const file = fileInput.files ? fileInput.files[0] : null;

        const thumbElement = qualityRange.querySelector('[role="slider"]');
        const quality = thumbElement ? thumbElement.getAttribute("aria-valuenow") : null;

        if (!file) {
          alert("File is not selected.");
          return;
        }

        if (quality === null) {
          alert("Select the quality for conversion.");
          return;
        }

        try {
          const response = await ImageConversionController.start(file, quality);

          if (!imgPreview) {
            console.error("Um ou mais elementos necessários não foram encontrados no DOM.");
            return;
          }

          if (!response || !response.src) {
            console.error("Aconteceu algo de errado ao converter a imagem. RESPONSE:", response);
            return;
          }

          downloadLink.href = response.src;
          downloadLink.download = `${removeExtension(file.name)}.png`;
          imgPreview.src = response.src;
          downloadContainer.classList.remove("hidden");
          imgPreview.classList.remove("hidden");
        } catch (error) {
          console.error("Erro na conversão da imagem:", error);
          alert("Failed to convert the image.");
        }
      });
    });
  </script>
</Layout>
